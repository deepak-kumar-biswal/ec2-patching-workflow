AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 Patching Orchestrator - Hub (Simplified - No Approval Workflow)

Parameters:
  NamePrefix:
    Type: String
    Default: ec2-patch
    Description: Name prefix for resources
  Environment:
    Type: String
    AllowedValues: [dev, test, stage, prod]
    Default: dev
  WaveMaxConcurrency:
    Type: Number
    Default: 2
  AccountMaxConcurrency:
    Type: Number
    Default: 5
  RegionMaxConcurrency:
    Type: Number
    Default: 3
  PollIntervalSeconds:
    Type: Number
    Default: 15
    Description: Seconds to wait between SSM status polls
  SsmMaxConcurrency:
    Type: String
    Default: '10%'
  SsmMaxErrors:
    Type: String
    Default: '1'
  LogRetentionDays:
    Type: Number
    Default: 30
  CrossAccountExternalId:
    Type: String
    Default: ''
    NoEcho: true
  LambdaArtifactBucket:
    Type: String
    Description: S3 bucket containing the Lambda zip artifact
  LambdaArtifactKey:
    Type: String
    Description: S3 key (object key) of the Lambda zip artifact containing all handlers
  ReservedConcSend:
    Type: Number
    Default: 10
    Description: Reserved concurrency for SendSsmCommand Lambda
  ReservedConcPoll:
    Type: Number
    Default: 20
    Description: Reserved concurrency for PollSsmCommand Lambda
  ReservedConcInventory:
    Type: Number
    Default: 5
    Description: Reserved concurrency for PreEC2Inventory Lambda
  ReservedConcPostVerify:
    Type: Number
    Default: 5
    Description: Reserved concurrency for PostEC2Verify Lambda
  EnableScheduledExecution:
    Type: String
    AllowedValues: [ENABLED, DISABLED]
    Default: DISABLED
    Description: Enable or disable the scheduled EventBridge rule
  PatchingSchedule:
    Type: String
    Default: 'cron(0 2 ? * SUN *)'
    Description: Cron expression for patching schedule (default - Sundays at 2 AM UTC)
  DefaultPatchGroup:
    Type: String
    Default: 'prod-servers'
    Description: Default EC2 tag value for PatchGroup to target
  NotificationEmail:
    Type: String
    Default: ''
    Description: Email address for patching notifications (leave empty to disable notifications)
  CustomSsmDocuments:
    Type: String
    AllowedValues: [ENABLED, DISABLED]
    Default: DISABLED
    Description: Enable custom SSM documents for pre/post patch operations
  WindowsPrePatchDocument:
    Type: String
    Default: 'WindowsPrePatch'
    Description: Custom SSM document for Windows pre-patch operations
  WindowsPatchDocument:
    Type: String
    Default: 'WindowsPatch'
    Description: Custom SSM document for Windows patching
  WindowsPostPatchDocument:
    Type: String
    Default: 'WindowsPostPatch'
    Description: Custom SSM document for Windows post-patch operations
  LinuxPrePatchDocument:
    Type: String
    Default: 'LinuxPrePatch'
    Description: Custom SSM document for Linux pre-patch operations
  LinuxPatchDocument:
    Type: String
    Default: 'LinuxPatch'
    Description: Custom SSM document for Linux patching
  LinuxPostPatchDocument:
    Type: String
    Default: 'LinuxPostPatch'
    Description: Custom SSM document for Linux post-patch operations

Conditions:
  HasNotificationEmail: !Not [!Equals [!Ref NotificationEmail, '']]
  UseCustomDocuments: !Equals [!Ref CustomSsmDocuments, 'ENABLED']

Resources:
  # SNS Topic for notifications (optional)
  NotificationTopic:
    Type: AWS::SNS::Topic
    Condition: HasNotificationEmail
    Properties:
      TopicName: !Sub '${NamePrefix}-${Environment}-patching-notifications'
      KmsMasterKeyId: !Ref KmsKey
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail

  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub '${NamePrefix}-${Environment} KMS key for data at rest'
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowRoot
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'

  KmsAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${NamePrefix}-${Environment}-data'
      TargetKeyId: !Ref KmsKey

  SnapshotsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref KmsKey
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: TransitionNonCurrent
            Status: Enabled
            NoncurrentVersionTransitions:
              - StorageClass: GLACIER
                TransitionInDays: 30
            NoncurrentVersionExpiration:
              NoncurrentDays: 365
      Tags:
        - Key: Name
          Value: !Sub '${NamePrefix}-${Environment}-snapshots'

  SnapshotsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SnapshotsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceTLS
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub '${SnapshotsBucket.Arn}'
              - !Sub '${SnapshotsBucket.Arn}/*'
            Condition:
              Bool:
                aws:SecureTransport: 'false'

  PatchRunsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub '${NamePrefix}-${Environment}-patchruns'
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref KmsKey
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: scope
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: scope
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # Unified Execution Role (consolidates Lambda + Step Functions + EventBridge permissions)
  UnifiedExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
          - Effect: Allow
            Principal: { Service: states.amazonaws.com }
            Action: sts:AssumeRole
          - Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: UnifiedOrchestrationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Cross-account role assumption for all spoke accounts
              - Effect: Allow
                Action: sts:AssumeRole
                Resource: !Sub 'arn:${AWS::Partition}:iam::*:role/${NamePrefix}-${Environment}-PatchExecRole'
              # S3 permissions for storing artifacts and outputs
              - Effect: Allow
                Action: [ s3:PutObject, s3:PutObjectTagging, s3:AbortMultipartUpload ]
                Resource: !Sub '${SnapshotsBucket.Arn}/*'
              # KMS permissions for encryption/decryption
              - Effect: Allow
                Action: [ kms:Encrypt, kms:GenerateDataKey* ]
                Resource: !Ref KmsKey
              # DynamoDB permissions for execution state tracking
              - Effect: Allow
                Action: [ dynamodb:PutItem, dynamodb:UpdateItem ]
                Resource: !GetAtt PatchRunsTable.Arn
              # SSM permissions for monitoring command execution
              - Effect: Allow
                Action: [ ssm:ListCommandInvocations, ssm:ListCommands, ssm:GetCommandInvocation ]
                Resource: '*'
              # CloudWatch metrics for post-verification reporting
              - Effect: Allow
                Action: [ cloudwatch:PutMetricData ]
                Resource: '*'
                Condition:
                  StringEquals:
                    cloudwatch:namespace: 'EC2Patching/Orchestrator'
              # Step Functions permissions to invoke Lambda functions
              - Effect: Allow
                Action: [ lambda:InvokeFunction ]
                Resource:
                  - !GetAtt PreEC2InventoryFunction.Arn
                  - !GetAtt PollSsmCommandFunction.Arn
                  - !GetAtt SendSsmCommandFunction.Arn
                  - !GetAtt PostEC2VerifyFunction.Arn
              # CloudWatch Logs permissions for Step Functions
              - Effect: Allow
                Action: [ logs:CreateLogGroup, logs:CreateLogStream, logs:PutLogEvents ]
                Resource: '*'
              # EventBridge permissions to start Step Functions executions
              - Effect: Allow
                Action: [ states:StartExecution ]
                Resource: !Sub 'arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${NamePrefix}-${Environment}-orchestrator'
              # SNS permissions for notifications (conditional)
              - Effect: Allow
                Action: [ sns:Publish ]
                Resource: !If 
                  - HasNotificationEmail
                  - !Ref NotificationTopic
                  - !Ref AWS::NoValue

  # Lambda functions (all from a single shared artifact; handlers point to modules)
  PreEC2InventoryFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${NamePrefix}-${Environment}-PreEC2Inventory'
      Runtime: python3.11
      Handler: PreEC2Inventory.handler
      Role: !GetAtt UnifiedExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaArtifactBucket
        S3Key: !Ref LambdaArtifactKey
      MemorySize: 512
      Timeout: 60
      ReservedConcurrentExecutions: !Ref ReservedConcInventory
      Environment:
        Variables:
          NAME_PREFIX: !Ref NamePrefix
          ENVIRONMENT: !Ref Environment
          S3_BUCKET: !Ref SnapshotsBucket
          DDB_TABLE: !Ref PatchRunsTable
          SNS_TOPIC_ARN: !If 
            - HasNotificationEmail
            - !Ref NotificationTopic
            - ''

  PollSsmCommandFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${NamePrefix}-${Environment}-PollSsmCommand'
      Runtime: python3.11
      Handler: PollSsmCommand.handler
      Role: !GetAtt UnifiedExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaArtifactBucket
        S3Key: !Ref LambdaArtifactKey
      MemorySize: 512
      Timeout: 60
      ReservedConcurrentExecutions: !Ref ReservedConcPoll
      Environment:
        Variables:
          SNS_TOPIC_ARN: !If 
            - HasNotificationEmail
            - !Ref NotificationTopic
            - ''

  SendSsmCommandFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${NamePrefix}-${Environment}-SendSsmCommand'
      Runtime: python3.11
      Handler: SendSsmCommand.handler
      Role: !GetAtt UnifiedExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaArtifactBucket
        S3Key: !Ref LambdaArtifactKey
      MemorySize: 512
      Timeout: 60
      ReservedConcurrentExecutions: !Ref ReservedConcSend
      Environment:
        Variables:
          SNS_TOPIC_ARN: !If 
            - HasNotificationEmail
            - !Ref NotificationTopic
            - ''
          USE_CUSTOM_DOCUMENTS: !Ref CustomSsmDocuments
          WINDOWS_PRE_PATCH_DOC: !Ref WindowsPrePatchDocument
          WINDOWS_PATCH_DOC: !Ref WindowsPatchDocument
          WINDOWS_POST_PATCH_DOC: !Ref WindowsPostPatchDocument
          LINUX_PRE_PATCH_DOC: !Ref LinuxPrePatchDocument
          LINUX_PATCH_DOC: !Ref LinuxPatchDocument
          LINUX_POST_PATCH_DOC: !Ref LinuxPostPatchDocument

  PostEC2VerifyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${NamePrefix}-${Environment}-PostEC2Verify'
      Runtime: python3.11
      Handler: PostEC2Verify.handler
      Role: !GetAtt UnifiedExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaArtifactBucket
        S3Key: !Ref LambdaArtifactKey
      MemorySize: 512
      Timeout: 60
      ReservedConcurrentExecutions: !Ref ReservedConcPostVerify
      Environment:
        Variables:
          NAME_PREFIX: !Ref NamePrefix
          ENVIRONMENT: !Ref Environment
          S3_BUCKET: !Ref SnapshotsBucket
          DDB_TABLE: !Ref PatchRunsTable
          SNS_TOPIC_ARN: !If 
            - HasNotificationEmail
            - !Ref NotificationTopic
            - ''

  OrchestratorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/states/${NamePrefix}-${Environment}-orchestrator'
      RetentionInDays: !Ref LogRetentionDays

  OrchestratorStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${NamePrefix}-${Environment}-orchestrator'
      RoleArn: !GetAtt UnifiedExecutionRole.Arn
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt OrchestratorLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL
      Definition:
        Comment: EC2 Patching Orchestrator (CFN) - Simplified without approval
        StartAt: Waves
        States:
          Waves:
            Type: Map
            ItemsPath: $.accountWaves
            MaxConcurrency: !Ref WaveMaxConcurrency
            End: true
            Iterator:
              StartAt: PreWave
              States:
                PreWave:
                  Type: Parallel
                  Branches:
                    - StartAt: Inventory
                      States:
                        Inventory:
                          Type: Task
                          Resource: arn:aws:states:::lambda:invoke
                          Parameters:
                            FunctionName: !Ref PreEC2InventoryFunction
                            Payload.$: '$'
                          End: true
                  Next: PerAccount
                PerAccount:
                  Type: Map
                  ItemsPath: $.accounts
                  MaxConcurrency: !Ref AccountMaxConcurrency
                  Parameters:
                    account.$: '$$.Map.Item.Value'
                    regions.$: '$.regions'
                  Iterator:
                    StartAt: PerRegion
                    States:
                      PerRegion:
                        Type: Map
                        ItemsPath: $.regions
                        Parameters:
                          region.$: '$$.Map.Item.Value'
                          account.$: '$.account'
                        MaxConcurrency: !Ref RegionMaxConcurrency
                        Iterator:
                          StartAt: PreCollectEnabled?
                          States:
                            PreCollectEnabled?:
                              Type: Choice
                              Choices:
                                - Variable: '$$.Execution.Input.preCollect.enabled'
                                  BooleanEquals: true
                                  Next: PreCollect
                              Default: SendSSM
                            PreCollect:
                              Type: Parallel
                              Catch:
                                - ErrorEquals: [ States.ALL ]
                                  ResultPath: $.precollect_error
                                  Next: SendSSM
                              Branches:
                                - StartAt: PreCollectLinux
                                  States:
                                    PreCollectLinux:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.prelinux
                                      Parameters:
                                        FunctionName: !Ref SendSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          externalId: !Ref CrossAccountExternalId
                                          region.$: '$.region'
                                          documentName: 'AWS-RunShellScript'
                                          targets:
                                            - Key: 'tag:PatchGroup'
                                              Values.$: 'States.Array($$.Execution.Input.ec2.tagValue)'
                                          maxConcurrency: !Ref SsmMaxConcurrency
                                          maxErrors: !Ref SsmMaxErrors
                                          parameters:
                                            commands:
                                              - 'uname -a'
                                              - 'cat /etc/os-release || true'
                                              - 'date -Is'
                                              - 'df -h'
                                              - 'free -m || true'
                                              - 'ps aux --sort=-%cpu | head -n 30'
                                              - 'systemctl list-units --type=service --state=running | head -n 100 || true'
                                              - 'ss -tulpn 2>/dev/null || netstat -tulpn 2>/dev/null || true'
                                              - 'ip addr'
                                              - 'uptime'
                                      Next: PollPreLinux
                                      Retry:
                                        - ErrorEquals: [ States.TaskFailed ]
                                          IntervalSeconds: 5
                                          BackoffRate: 2.0
                                          MaxAttempts: 3
                                      Catch:
                                        - ErrorEquals: [ States.ALL ]
                                          ResultPath: $.prelinux_error
                                          Next: SkipPreLinuxPoll
                                    PollPreLinux:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.pollprelinux
                                      Parameters:
                                        FunctionName: !Ref PollSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          region.$: '$.region'
                                          externalId: !Ref CrossAccountExternalId
                                          cmd:
                                            CommandId.$: '$.prelinux.Payload.CommandId'
                                          storeOutput: true
                                          outputS3Bucket: !Ref SnapshotsBucket
                                          outputS3Prefix.$: 'States.Format("runs/{}/pre/account-{}/region-{}/linux", $$.Execution.Id, $.account, $.region)'
                                      End: true
                                    SkipPreLinuxPoll:
                                      Type: Pass
                                      End: true
                                - StartAt: PreCollectWindows
                                  States:
                                    PreCollectWindows:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.prewindows
                                      Parameters:
                                        FunctionName: !Ref SendSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          externalId: !Ref CrossAccountExternalId
                                          region.$: '$.region'
                                          documentName: 'AWS-RunPowerShellScript'
                                          targets:
                                            - Key: 'tag:PatchGroup'
                                              Values.$: 'States.Array($$.Execution.Input.ec2.tagValue)'
                                          maxConcurrency: !Ref SsmMaxConcurrency
                                          maxErrors: !Ref SsmMaxErrors
                                          parameters:
                                            commands:
                                              - 'systeminfo'
                                              - 'Get-CimInstance Win32_OperatingSystem | Select-Object Caption,Version,BuildNumber,LastBootUpTime'
                                              - 'Get-HotFix | Select-Object HotFixID,InstalledOn | Sort-Object InstalledOn -Descending | Select-Object -First 50'
                                              - 'Get-Service | Where-Object {$_.Status -eq "Running"} | Select-Object Name,DisplayName,Status | Sort-Object Name'
                                              - 'Get-Process | Sort-Object CPU -Descending | Select-Object -First 50 Name,Id,CPU,WS'
                                              - 'Get-Volume | Select-Object DriveLetter,FileSystemLabel,FileSystem,Size,SizeRemaining'
                                              - 'Get-NetTCPConnection -State Listen | Select-Object LocalAddress,LocalPort,OwningProcess -First 100'
                                      Next: PollPreWindows
                                      Retry:
                                        - ErrorEquals: [ States.TaskFailed ]
                                          IntervalSeconds: 5
                                          BackoffRate: 2.0
                                          MaxAttempts: 3
                                      Catch:
                                        - ErrorEquals: [ States.ALL ]
                                          ResultPath: $.prewindows_error
                                          Next: SkipPreWindowsPoll
                                    PollPreWindows:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.pollprewindows
                                      Parameters:
                                        FunctionName: !Ref PollSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          region.$: '$.region'
                                          externalId: !Ref CrossAccountExternalId
                                          cmd:
                                            CommandId.$: '$.prewindows.Payload.CommandId'
                                          storeOutput: true
                                          outputS3Bucket: !Ref SnapshotsBucket
                                          outputS3Prefix.$: 'States.Format("runs/{}/pre/account-{}/region-{}/windows", $$.Execution.Id, $.account, $.region)'
                                      End: true
                                    SkipPreWindowsPoll:
                                      Type: Pass
                                      End: true
                              Next: CustomPrePatch
                            CustomPrePatch:
                              Type: Choice
                              Choices:
                                - Variable: '$$.Execution.Input.useCustomDocuments'
                                  BooleanEquals: true
                                  Next: RunCustomPrePatch
                              Default: SendSSM
                            RunCustomPrePatch:
                              Type: Parallel
                              Catch:
                                - ErrorEquals: [ States.ALL ]
                                  ResultPath: $.custom_prepatch_error
                                  Next: SendSSM
                              Branches:
                                - StartAt: CustomPrePatchWindows
                                  States:
                                    CustomPrePatchWindows:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.custom_pre_windows
                                      Parameters:
                                        FunctionName: !Ref SendSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          externalId: !Ref CrossAccountExternalId
                                          region.$: '$.region'
                                          documentName.$: 'States.Format("{}", $$.Execution.Input.customDocuments.windowsPrePatch)'
                                          targets:
                                            - Key: 'tag:PatchGroup'
                                              Values.$: 'States.Array($$.Execution.Input.ec2.tagValue)'
                                            - Key: 'tag:Platform'
                                              Values: ['Windows']
                                          maxConcurrency: !Ref SsmMaxConcurrency
                                          maxErrors: !Ref SsmMaxErrors
                                          outputS3Bucket: !Ref SnapshotsBucket
                                          outputS3Prefix.$: 'States.Format("runs/{}/custom-pre/account-{}/region-{}/windows", $$.Execution.Id, $.account, $.region)'
                                      Next: PollCustomPreWindows
                                      Retry:
                                        - ErrorEquals: [ States.TaskFailed ]
                                          IntervalSeconds: 5
                                          BackoffRate: 2.0
                                          MaxAttempts: 3
                                      Catch:
                                        - ErrorEquals: [ States.ALL ]
                                          ResultPath: $.custom_pre_windows_error
                                          Next: SkipCustomPreWindowsPoll
                                    PollCustomPreWindows:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.poll_custom_pre_windows
                                      Parameters:
                                        FunctionName: !Ref PollSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          region.$: '$.region'
                                          externalId: !Ref CrossAccountExternalId
                                          cmd:
                                            CommandId.$: '$.custom_pre_windows.Payload.CommandId'
                                          storeOutput: true
                                          outputS3Bucket: !Ref SnapshotsBucket
                                          outputS3Prefix.$: 'States.Format("runs/{}/custom-pre/account-{}/region-{}/windows", $$.Execution.Id, $.account, $.region)'
                                      End: true
                                    SkipCustomPreWindowsPoll:
                                      Type: Pass
                                      End: true
                                - StartAt: CustomPrePatchLinux
                                  States:
                                    CustomPrePatchLinux:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.custom_pre_linux
                                      Parameters:
                                        FunctionName: !Ref SendSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          externalId: !Ref CrossAccountExternalId
                                          region.$: '$.region'
                                          documentName.$: 'States.Format("{}", $$.Execution.Input.customDocuments.linuxPrePatch)'
                                          targets:
                                            - Key: 'tag:PatchGroup'
                                              Values.$: 'States.Array($$.Execution.Input.ec2.tagValue)'
                                            - Key: 'tag:Platform'
                                              Values: ['Linux']
                                          maxConcurrency: !Ref SsmMaxConcurrency
                                          maxErrors: !Ref SsmMaxErrors
                                          outputS3Bucket: !Ref SnapshotsBucket
                                          outputS3Prefix.$: 'States.Format("runs/{}/custom-pre/account-{}/region-{}/linux", $$.Execution.Id, $.account, $.region)'
                                      Next: PollCustomPreLinux
                                      Retry:
                                        - ErrorEquals: [ States.TaskFailed ]
                                          IntervalSeconds: 5
                                          BackoffRate: 2.0
                                          MaxAttempts: 3
                                      Catch:
                                        - ErrorEquals: [ States.ALL ]
                                          ResultPath: $.custom_pre_linux_error
                                          Next: SkipCustomPreLinuxPoll
                                    PollCustomPreLinux:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.poll_custom_pre_linux
                                      Parameters:
                                        FunctionName: !Ref PollSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          region.$: '$.region'
                                          externalId: !Ref CrossAccountExternalId
                                          cmd:
                                            CommandId.$: '$.custom_pre_linux.Payload.CommandId'
                                          storeOutput: true
                                          outputS3Bucket: !Ref SnapshotsBucket
                                          outputS3Prefix.$: 'States.Format("runs/{}/custom-pre/account-{}/region-{}/linux", $$.Execution.Id, $.account, $.region)'
                                      End: true
                                    SkipCustomPreLinuxPoll:
                                      Type: Pass
                                      End: true
                              Next: SendSSM
                            SendSSM:
                              Type: Choice
                              Choices:
                                - Variable: '$$.Execution.Input.useCustomDocuments'
                                  BooleanEquals: true
                                  Next: CustomPatchParallel
                              Default: StandardPatch
                            StandardPatch:
                              Type: Task
                              Resource: arn:aws:states:::lambda:invoke
                              ResultPath: $.ssm
                              Parameters:
                                FunctionName: !Ref SendSsmCommandFunction
                                Payload:
                                  roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                  externalId: !Ref CrossAccountExternalId
                                  region.$: '$.region'
                                  documentName: 'AWS-RunPatchBaseline'
                                  targets:
                                    - Key: 'tag:PatchGroup'
                                      Values.$: 'States.Array($$.Execution.Input.ec2.tagValue)'
                                  maxConcurrency: !Ref SsmMaxConcurrency
                                  maxErrors: !Ref SsmMaxErrors
                                  outputS3Bucket: !Ref SnapshotsBucket
                                  outputS3Prefix.$: 'States.Format("runs/{}/account-{}/region-{}", $$.Execution.Id, $.account, $.region)'
                              Next: MonitorSSM
                              Retry:
                                - ErrorEquals: [ States.TaskFailed ]
                                  IntervalSeconds: 5
                                  BackoffRate: 2.0
                                  MaxAttempts: 3
                            CustomPatchParallel:
                              Type: Parallel
                              Branches:
                                - StartAt: CustomPatchWindows
                                  States:
                                    CustomPatchWindows:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.custom_patch_windows
                                      Parameters:
                                        FunctionName: !Ref SendSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          externalId: !Ref CrossAccountExternalId
                                          region.$: '$.region'
                                          documentName.$: 'States.Format("{}", $$.Execution.Input.customDocuments.windowsPatch)'
                                          targets:
                                            - Key: 'tag:PatchGroup'
                                              Values.$: 'States.Array($$.Execution.Input.ec2.tagValue)'
                                            - Key: 'tag:Platform'
                                              Values: ['Windows']
                                          maxConcurrency: !Ref SsmMaxConcurrency
                                          maxErrors: !Ref SsmMaxErrors
                                          outputS3Bucket: !Ref SnapshotsBucket
                                          outputS3Prefix.$: 'States.Format("runs/{}/custom-patch/account-{}/region-{}/windows", $$.Execution.Id, $.account, $.region)'
                                      Next: PollCustomPatchWindows
                                      Retry:
                                        - ErrorEquals: [ States.TaskFailed ]
                                          IntervalSeconds: 5
                                          BackoffRate: 2.0
                                          MaxAttempts: 3
                                    PollCustomPatchWindows:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.poll_custom_patch_windows
                                      Parameters:
                                        FunctionName: !Ref PollSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          region.$: '$.region'
                                          externalId: !Ref CrossAccountExternalId
                                          cmd:
                                            CommandId.$: '$.custom_patch_windows.Payload.CommandId'
                                          storeOutput: true
                                          outputS3Bucket: !Ref SnapshotsBucket
                                          outputS3Prefix.$: 'States.Format("runs/{}/custom-patch/account-{}/region-{}/windows", $$.Execution.Id, $.account, $.region)'
                                      End: true
                                - StartAt: CustomPatchLinux
                                  States:
                                    CustomPatchLinux:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.custom_patch_linux
                                      Parameters:
                                        FunctionName: !Ref SendSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          externalId: !Ref CrossAccountExternalId
                                          region.$: '$.region'
                                          documentName.$: 'States.Format("{}", $$.Execution.Input.customDocuments.linuxPatch)'
                                          targets:
                                            - Key: 'tag:PatchGroup'
                                              Values.$: 'States.Array($$.Execution.Input.ec2.tagValue)'
                                            - Key: 'tag:Platform'
                                              Values: ['Linux']
                                          maxConcurrency: !Ref SsmMaxConcurrency
                                          maxErrors: !Ref SsmMaxErrors
                                          outputS3Bucket: !Ref SnapshotsBucket
                                          outputS3Prefix.$: 'States.Format("runs/{}/custom-patch/account-{}/region-{}/linux", $$.Execution.Id, $.account, $.region)'
                                      Next: PollCustomPatchLinux
                                      Retry:
                                        - ErrorEquals: [ States.TaskFailed ]
                                          IntervalSeconds: 5
                                          BackoffRate: 2.0
                                          MaxAttempts: 3
                                    PollCustomPatchLinux:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.poll_custom_patch_linux
                                      Parameters:
                                        FunctionName: !Ref PollSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          region.$: '$.region'
                                          externalId: !Ref CrossAccountExternalId
                                          cmd:
                                            CommandId.$: '$.custom_patch_linux.Payload.CommandId'
                                          storeOutput: true
                                          outputS3Bucket: !Ref SnapshotsBucket
                                          outputS3Prefix.$: 'States.Format("runs/{}/custom-patch/account-{}/region-{}/linux", $$.Execution.Id, $.account, $.region)'
                                      End: true
                              Next: CustomPostPatch
                            CustomPostPatch:
                              Type: Parallel
                              Catch:
                                - ErrorEquals: [ States.ALL ]
                                  ResultPath: $.custom_postpatch_error
                                  Next: PostVerify
                              Branches:
                                - StartAt: CustomPostPatchWindows
                                  States:
                                    CustomPostPatchWindows:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.custom_post_windows
                                      Parameters:
                                        FunctionName: !Ref SendSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          externalId: !Ref CrossAccountExternalId
                                          region.$: '$.region'
                                          documentName.$: 'States.Format("{}", $$.Execution.Input.customDocuments.windowsPostPatch)'
                                          targets:
                                            - Key: 'tag:PatchGroup'
                                              Values.$: 'States.Array($$.Execution.Input.ec2.tagValue)'
                                            - Key: 'tag:Platform'
                                              Values: ['Windows']
                                          maxConcurrency: !Ref SsmMaxConcurrency
                                          maxErrors: !Ref SsmMaxErrors
                                          outputS3Bucket: !Ref SnapshotsBucket
                                          outputS3Prefix.$: 'States.Format("runs/{}/custom-post/account-{}/region-{}/windows", $$.Execution.Id, $.account, $.region)'
                                      Next: PollCustomPostWindows
                                      Retry:
                                        - ErrorEquals: [ States.TaskFailed ]
                                          IntervalSeconds: 5
                                          BackoffRate: 2.0
                                          MaxAttempts: 3
                                      Catch:
                                        - ErrorEquals: [ States.ALL ]
                                          ResultPath: $.custom_post_windows_error
                                          Next: SkipCustomPostWindowsPoll
                                    PollCustomPostWindows:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.poll_custom_post_windows
                                      Parameters:
                                        FunctionName: !Ref PollSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          region.$: '$.region'
                                          externalId: !Ref CrossAccountExternalId
                                          cmd:
                                            CommandId.$: '$.custom_post_windows.Payload.CommandId'
                                          storeOutput: true
                                          outputS3Bucket: !Ref SnapshotsBucket
                                          outputS3Prefix.$: 'States.Format("runs/{}/custom-post/account-{}/region-{}/windows", $$.Execution.Id, $.account, $.region)'
                                      End: true
                                    SkipCustomPostWindowsPoll:
                                      Type: Pass
                                      End: true
                                - StartAt: CustomPostPatchLinux
                                  States:
                                    CustomPostPatchLinux:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.custom_post_linux
                                      Parameters:
                                        FunctionName: !Ref SendSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          externalId: !Ref CrossAccountExternalId
                                          region.$: '$.region'
                                          documentName.$: 'States.Format("{}", $$.Execution.Input.customDocuments.linuxPostPatch)'
                                          targets:
                                            - Key: 'tag:PatchGroup'
                                              Values.$: 'States.Array($$.Execution.Input.ec2.tagValue)'
                                            - Key: 'tag:Platform'
                                              Values: ['Linux']
                                          maxConcurrency: !Ref SsmMaxConcurrency
                                          maxErrors: !Ref SsmMaxErrors
                                          outputS3Bucket: !Ref SnapshotsBucket
                                          outputS3Prefix.$: 'States.Format("runs/{}/custom-post/account-{}/region-{}/linux", $$.Execution.Id, $.account, $.region)'
                                      Next: PollCustomPostLinux
                                      Retry:
                                        - ErrorEquals: [ States.TaskFailed ]
                                          IntervalSeconds: 5
                                          BackoffRate: 2.0
                                          MaxAttempts: 3
                                      Catch:
                                        - ErrorEquals: [ States.ALL ]
                                          ResultPath: $.custom_post_linux_error
                                          Next: SkipCustomPostLinuxPoll
                                    PollCustomPostLinux:
                                      Type: Task
                                      Resource: arn:aws:states:::lambda:invoke
                                      ResultPath: $.poll_custom_post_linux
                                      Parameters:
                                        FunctionName: !Ref PollSsmCommandFunction
                                        Payload:
                                          roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                          region.$: '$.region'
                                          externalId: !Ref CrossAccountExternalId
                                          cmd:
                                            CommandId.$: '$.custom_post_linux.Payload.CommandId'
                                          storeOutput: true
                                          outputS3Bucket: !Ref SnapshotsBucket
                                          outputS3Prefix.$: 'States.Format("runs/{}/custom-post/account-{}/region-{}/linux", $$.Execution.Id, $.account, $.region)'
                                      End: true
                                    SkipCustomPostLinuxPoll:
                                      Type: Pass
                                      End: true
                              Next: PostVerify
                            MonitorSSM:
                              Type: Task
                              Resource: arn:aws:states:::lambda:invoke
                              ResultPath: $.poll
                              Parameters:
                                FunctionName: !Ref PollSsmCommandFunction
                                Payload:
                                  roleArn.$: !Sub 'States.Format("arn:aws:iam::{}:role/{}", $.account, "${NamePrefix}-${Environment}-PatchExecRole")'
                                  region.$: '$.region'
                                  externalId: !Ref CrossAccountExternalId
                                  cmd:
                                    CommandId.$: '$.ssm.Payload.CommandId'
                              Retry:
                                - ErrorEquals: [ States.TaskFailed ]
                                  IntervalSeconds: 5
                                  BackoffRate: 2.0
                                  MaxAttempts: 3
                              Next: PollComplete?
                            PollComplete?:
                              Type: Choice
                              Choices:
                                - Variable: '$.poll.Payload.should_continue_polling'
                                  BooleanEquals: true
                                  Next: WaitBeforePoll
                              Default: PostVerify
                            WaitBeforePoll:
                              Type: Wait
                              Seconds: !Ref PollIntervalSeconds
                              Next: MonitorSSM
                            PostVerify:
                              Type: Task
                              Resource: arn:aws:states:::lambda:invoke
                              Parameters:
                                FunctionName: !Ref PostEC2VerifyFunction
                                Payload.$: '$'
                              ResultPath: $.post
                              Retry:
                                - ErrorEquals: [ States.TaskFailed ]
                                  IntervalSeconds: 5
                                  BackoffRate: 2.0
                                  MaxAttempts: 3
                              Next: EvaluateIssues
                            EvaluateIssues:
                              Type: Choice
                              Choices:
                                - And:
                                    - Variable: '$.post.Payload.hasIssues'
                                      BooleanEquals: true
                                    - Variable: '$$.Execution.Input.abortOnIssues'
                                      BooleanEquals: true
                                  Next: AbortDueToIssues
                              Default: RegionComplete
                            RegionComplete:
                              Type: Succeed
                            AbortDueToIssues:
                              Type: Fail
                              Error: IssuesDetected
                              Cause: AbortOnIssues flag enabled and issues detected in region
                        End: true
                    End: true
                  End: true

  # Basic alarm on failed executions
  StateMachineFailedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${NamePrefix}-${Environment}-orchestrator-failed'
      AlarmDescription: 'Alarm when Step Functions orchestration fails.'
      Namespace: 'AWS/States'
      MetricName: 'ExecutionsFailed'
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref OrchestratorStateMachine
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions: !If 
        - HasNotificationEmail
        - - !Ref NotificationTopic
        - !Ref AWS::NoValue
      OKActions: !If 
        - HasNotificationEmail
        - - !Ref NotificationTopic
        - !Ref AWS::NoValue

  # Alarm for Lambda function errors
  LambdaErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${NamePrefix}-${Environment}-lambda-errors'
      AlarmDescription: 'Alarm when Lambda functions have errors'
      MetricName: 'Errors'
      Namespace: 'AWS/Lambda'
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions: !If 
        - HasNotificationEmail
        - - !Ref NotificationTopic
        - !Ref AWS::NoValue

  # Alarm for high patch failure rate
  PatchFailureRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${NamePrefix}-${Environment}-patch-failure-rate'
      AlarmDescription: 'Alarm when patch success rate drops below 80%'
      MetricName: 'SuccessRate'
      Namespace: 'EC2Patching/Orchestrator'
      Statistic: Average
      Period: 900
      EvaluationPeriods: 1
      Threshold: 80
      ComparisonOperator: LessThanThreshold
      TreatMissingData: notBreaching
      AlarmActions: !If 
        - HasNotificationEmail
        - - !Ref NotificationTopic
        - !Ref AWS::NoValue

  # EventBridge Rule to trigger the orchestrator
  OrchestratorScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${NamePrefix}-${Environment}-patch-schedule'
      Description: 'Scheduled trigger for EC2 patching orchestrator'
      State: !Ref EnableScheduledExecution
      ScheduleExpression: !Ref PatchingSchedule
      Targets:
        - Id: 'OrchestratorTarget'
          Arn: !Ref OrchestratorStateMachine
          RoleArn: !GetAtt UnifiedExecutionRole.Arn
          Input: !Sub |
            {
              "comment": "Scheduled patching execution from EventBridge",
              "executionName": "scheduled-${Environment}",
              "accountWaves": [
                {
                  "name": "wave-1",
                  "accounts": ["${AWS::AccountId}"],
                  "regions": ["${AWS::Region}"]
                }
              ],
              "ec2": {
                "tagKey": "PatchGroup",
                "tagValue": "${DefaultPatchGroup}"
              },
              "preCollect": {
                "enabled": true
              },
              "useCustomDocuments": ${CustomSsmDocuments},
              "customDocuments": {
                "windowsPrePatch": "${WindowsPrePatchDocument}",
                "windowsPatch": "${WindowsPatchDocument}",
                "windowsPostPatch": "${WindowsPostPatchDocument}",
                "linuxPrePatch": "${LinuxPrePatchDocument}",
                "linuxPatch": "${LinuxPatchDocument}",
                "linuxPostPatch": "${LinuxPostPatchDocument}"
              },
              "abortOnIssues": true
            }

  OrchestratorDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${NamePrefix}-${Environment}-orchestrator'
      DashboardBody: !Sub
        - |
          {
            "widgets": [
              {
                "type": "metric",
                "x": 0, "y": 0, "width": 24, "height": 6,
                "properties": {
                  "title": "Step Functions: Executions",
                  "region": "${AWS::Region}",
                  "view": "timeSeries",
                  "stat": "Sum",
                  "period": 300,
                  "metrics": [
                    ["AWS/States","ExecutionsStarted","StateMachineArn","${OrchestratorStateMachine}"],
                    ["AWS/States","ExecutionsSucceeded","StateMachineArn","${OrchestratorStateMachine}"],
                    ["AWS/States","ExecutionsFailed","StateMachineArn","${OrchestratorStateMachine}"],
                    ["AWS/States","ExecutionsAborted","StateMachineArn","${OrchestratorStateMachine}"],
                    ["AWS/States","ExecutionsTimedOut","StateMachineArn","${OrchestratorStateMachine}"],
                    ["AWS/States","ExecutionsThrottled","StateMachineArn","${OrchestratorStateMachine}"]
                  ]
                }
              },
              {
                "type": "metric",
                "x": 0, "y": 6, "width": 12, "height": 6,
                "properties": {
                  "title": "Step Functions: ExecutionTime (avg ms)",
                  "region": "${AWS::Region}",
                  "view": "timeSeries",
                  "stat": "Average",
                  "period": 300,
                  "metrics": [
                    ["AWS/States","ExecutionTime","StateMachineArn","${OrchestratorStateMachine}"]
                  ]
                }
              },
              {
                "type": "metric",
                "x": 0, "y": 12, "width": 12, "height": 6,
                "properties": {
                  "title": "Lambda: Invocations (core)",
                  "region": "${AWS::Region}",
                  "view": "timeSeries",
                  "stat": "Sum",
                  "period": 300,
                  "metrics": [
                    ["AWS/Lambda","Invocations","FunctionName","${PreEC2InventoryFunction}"],
                    ["AWS/Lambda","Invocations","FunctionName","${SendSsmCommandFunction}"],
                    ["AWS/Lambda","Invocations","FunctionName","${PollSsmCommandFunction}"],
                    ["AWS/Lambda","Invocations","FunctionName","${PostEC2VerifyFunction}"]
                  ]
                }
              },
              {
                "type": "metric",
                "x": 12, "y": 12, "width": 12, "height": 6,
                "properties": {
                  "title": "Lambda: Errors (core)",
                  "region": "${AWS::Region}",
                  "view": "timeSeries",
                  "stat": "Sum",
                  "period": 300,
                  "metrics": [
                    ["AWS/Lambda","Errors","FunctionName","${PreEC2InventoryFunction}"],
                    ["AWS/Lambda","Errors","FunctionName","${SendSsmCommandFunction}"],
                    ["AWS/Lambda","Errors","FunctionName","${PollSsmCommandFunction}"],
                    ["AWS/Lambda","Errors","FunctionName","${PostEC2VerifyFunction}"]
                  ]
                }
              },
              {
                "type": "metric",
                "x": 0, "y": 18, "width": 12, "height": 6,
                "properties": {
                  "title": "Lambda: Duration p95 (ms)",
                  "region": "${AWS::Region}",
                  "view": "timeSeries",
                  "stat": "p95",
                  "period": 300,
                  "metrics": [
                    ["AWS/Lambda","Duration","FunctionName","${PreEC2InventoryFunction}"],
                    ["AWS/Lambda","Duration","FunctionName","${SendSsmCommandFunction}"],
                    ["AWS/Lambda","Duration","FunctionName","${PollSsmCommandFunction}"],
                    ["AWS/Lambda","Duration","FunctionName","${PostEC2VerifyFunction}"]
                  ]
                }
              },
              {
                "type": "metric",
                "x": 12, "y": 18, "width": 12, "height": 6,
                "properties": {
                  "title": "Lambda: Throttles",
                  "region": "${AWS::Region}",
                  "view": "timeSeries",
                  "stat": "Sum",
                  "period": 300,
                  "metrics": [
                    ["AWS/Lambda","Throttles","FunctionName","${PreEC2InventoryFunction}"],
                    ["AWS/Lambda","Throttles","FunctionName","${SendSsmCommandFunction}"],
                    ["AWS/Lambda","Throttles","FunctionName","${PollSsmCommandFunction}"],
                    ["AWS/Lambda","Throttles","FunctionName","${PostEC2VerifyFunction}"]
                  ]
                }
              },
              {
                "type": "metric",
                "x": 0, "y": 24, "width": 12, "height": 6,
                "properties": {
                  "title": "DynamoDB: Throttled Requests",
                  "region": "${AWS::Region}",
                  "view": "timeSeries",
                  "stat": "Sum",
                  "period": 300,
                  "metrics": [
                    ["AWS/DynamoDB","ThrottledRequests","TableName","${PatchRunsTable}"]
                  ]
                }
              },
              {
                "type": "metric",
                "x": 12, "y": 24, "width": 12, "height": 6,
                "properties": {
                  "title": "DynamoDB: Consumed RCUs/WCUs",
                  "region": "${AWS::Region}",
                  "view": "timeSeries",
                  "stat": "Sum",
                  "period": 300,
                  "metrics": [
                    ["AWS/DynamoDB","ConsumedReadCapacityUnits","TableName","${PatchRunsTable}"],
                    ["AWS/DynamoDB","ConsumedWriteCapacityUnits","TableName","${PatchRunsTable}"]
                  ]
                }
              },
              {
                "type": "alarm",
                "x": 0, "y": 30, "width": 6, "height": 4,
                "properties": {
                  "title": "Alarms",
                  "alarms": [ "${FailedAlarmArn}" ]
                }
              },
              {
                "type": "log",
                "x": 6, "y": 30, "width": 18, "height": 6,
                "properties": {
                  "title": "Recent Errors (Step Functions Log)",
                  "region": "${AWS::Region}",
                  "query": "SOURCE '/aws/states/${NamePrefix}-${Environment}-orchestrator' | fields @timestamp, @message | filter @message like /ERROR|Exception/ | sort @timestamp desc | limit 50",
                  "view": "table"
                }
              },
              {
                "type": "metric",
                "x": 0, "y": 36, "width": 12, "height": 6,
                "properties": {
                  "title": "Patching SuccessRate (%) by Account/Region",
                  "region": "${AWS::Region}",
                  "stat": "Average",
                  "period": 300,
                  "view": "timeSeries",
                  "yAxis": {"left": {"min": 0, "max": 100}},
                  "metrics": [
                    [ { "expression": "SEARCH('{EC2Patching/Orchestrator,NamePrefix,Environment,AccountId,Region} MetricName=\"SuccessRate\" NamePrefix=\"${NamePrefix}\" Environment=\"${Environment}\"', 'Average', 300)", "label": "SuccessRate", "id": "m1" } ]
                  ]
                }
              },
              {
                "type": "metric",
                "x": 12, "y": 36, "width": 12, "height": 6,
                "properties": {
                  "title": "Instances With Issues (sum)",
                  "region": "${AWS::Region}",
                  "stat": "Sum",
                  "period": 300,
                  "view": "timeSeries",
                  "metrics": [
                    [ { "expression": "SEARCH('{EC2Patching/Orchestrator,NamePrefix,Environment,AccountId,Region} MetricName=\"InstancesWithIssues\" NamePrefix=\"${NamePrefix}\" Environment=\"${Environment}\"', 'Sum', 300)", "label": "InstancesWithIssues", "id": "m2" } ]
                  ]
                }
              }
            ]
          }
        - { FailedAlarmArn: !GetAtt StateMachineFailedAlarm.Arn }

Outputs:
  PatchRunsTableName:
    Value: !Ref PatchRunsTable
  SnapshotsBucketName:
    Value: !Ref SnapshotsBucket
  StateMachineArn:
    Value: !Ref OrchestratorStateMachine
  DashboardName:
    Description: CloudWatch dashboard for the orchestrator
    Value: !Ref OrchestratorDashboard
  NotificationTopicArn:
    Condition: HasNotificationEmail
    Description: SNS topic ARN for patching notifications
    Value: !Ref NotificationTopic