name: Production EC2 Patching - Hub Deployment

on:
  push:
    branches: [ main ]
    paths: [ 'terraform/hub/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'terraform/hub/**' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - development
        - staging
        - production
      destroy:
        description: 'Destroy infrastructure'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write

env:
  TF_VERSION: 1.6.6
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      tf-plan: ${{ steps.plan.outputs.stdout }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets[format('{0}_ROLE_ARN', upper(env.ENVIRONMENT))] }}
          role-session-name: github-actions-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format Check
        working-directory: ./terraform/hub
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ./terraform/hub
        run: |
          terraform init \
            -backend-config="bucket=${{ vars[format('{0}_TF_STATE_BUCKET', upper(env.ENVIRONMENT))] }}" \
            -backend-config="key=ec2-patching/hub/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        working-directory: ./terraform/hub
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform/hub
        env:
          TF_VAR_region: ${{ env.AWS_REGION }}
          TF_VAR_orchestrator_account_id: ${{ vars[format('{0}_ACCOUNT_ID', upper(env.ENVIRONMENT))] }}
          TF_VAR_name_prefix: ${{ vars.NAME_PREFIX }}
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_bedrock_agent_id: ${{ secrets.BEDROCK_AGENT_ID }}
          TF_VAR_bedrock_agent_alias_id: ${{ secrets.BEDROCK_AGENT_ALIAS_ID }}
          TF_VAR_wave_rules: ${{ vars[format('{0}_WAVE_RULES_JSON', upper(env.ENVIRONMENT))] }}
          TF_VAR_sns_email_subscriptions: ${{ vars[format('{0}_SNS_EMAILS', upper(env.ENVIRONMENT))] }}
          TF_VAR_slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          TF_VAR_owner: ${{ vars.RESOURCE_OWNER }}
          TF_VAR_cost_center: ${{ vars.COST_CENTER }}
          TF_VAR_business_unit: ${{ vars.BUSINESS_UNIT }}
        run: |
          terraform plan -detailed-exitcode -out=tfplan 2>&1 | tee plan.log
          echo "stdout<<EOF" >> $GITHUB_OUTPUT
          cat plan.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: |
            ./terraform/hub/tfplan
            ./terraform/hub/plan.log
          retention-days: 30

  security-scan:
    name: Security & Compliance Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./terraform/hub
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: false
          quiet: false
          download_external_modules: true

      - name: Upload SARIF Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Run TFLint Analysis
        working-directory: ./terraform/hub
        run: |
          tflint --init
          tflint --format=compact

      - name: Run TFSec Security Analysis
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: './terraform/hub'
          format: 'sarif'
          soft_fail: false

  cost-analysis:
    name: Cost Analysis
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Cost Estimate
        working-directory: ./terraform/hub
        env:
          INFRACOST_TERRAFORM_BINARY: terraform
        run: |
          infracost breakdown --path . \
            --format json \
            --out-file infracost.json \
            --terraform-var="region=${{ env.AWS_REGION }}" \
            --terraform-var="orchestrator_account_id=${{ vars[format('{0}_ACCOUNT_ID', upper(env.ENVIRONMENT))] }}" \
            --terraform-var="name_prefix=${{ vars.NAME_PREFIX }}" \
            --terraform-var="environment=${{ env.ENVIRONMENT }}"

      - name: Post Cost Comment
        uses: infracost/actions/comment@v1
        if: github.event_name == 'pull_request'
        with:
          path: ./terraform/hub/infracost.json
          behavior: update

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, security-scan, cost-analysis]
    if: |
      github.ref == 'refs/heads/main' || 
      github.event_name == 'workflow_dispatch'
    environment: ${{ fromJSON('["development", "staging", "production"]')[contains(fromJSON('["development", "staging", "production"]'), github.event.inputs.environment || 'production')] }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets[format('{0}_ROLE_ARN', upper(env.ENVIRONMENT))] }}
          role-session-name: github-actions-deploy-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: ./terraform/hub/

      - name: Terraform Init
        working-directory: ./terraform/hub
        run: |
          terraform init \
            -backend-config="bucket=${{ vars[format('{0}_TF_STATE_BUCKET', upper(env.ENVIRONMENT))] }}" \
            -backend-config="key=ec2-patching/hub/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Terraform Destroy (if requested)
        if: github.event.inputs.destroy == 'true'
        working-directory: ./terraform/hub
        env:
          TF_VAR_region: ${{ env.AWS_REGION }}
          TF_VAR_orchestrator_account_id: ${{ vars[format('{0}_ACCOUNT_ID', upper(env.ENVIRONMENT))] }}
          TF_VAR_name_prefix: ${{ vars.NAME_PREFIX }}
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_bedrock_agent_id: ${{ secrets.BEDROCK_AGENT_ID }}
          TF_VAR_bedrock_agent_alias_id: ${{ secrets.BEDROCK_AGENT_ALIAS_ID }}
          TF_VAR_wave_rules: ${{ vars[format('{0}_WAVE_RULES_JSON', upper(env.ENVIRONMENT))] }}
          TF_VAR_sns_email_subscriptions: ${{ vars[format('{0}_SNS_EMAILS', upper(env.ENVIRONMENT))] }}
          TF_VAR_slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          TF_VAR_owner: ${{ vars.RESOURCE_OWNER }}
          TF_VAR_cost_center: ${{ vars.COST_CENTER }}
          TF_VAR_business_unit: ${{ vars.BUSINESS_UNIT }}
        run: terraform destroy -auto-approve

      - name: Terraform Apply
        if: github.event.inputs.destroy != 'true'
        working-directory: ./terraform/hub
        run: terraform apply -auto-approve tfplan

      - name: Terraform Output
        if: github.event.inputs.destroy != 'true'
        working-directory: ./terraform/hub
        id: terraform_output
        run: |
          terraform output -json > terraform_outputs.json
          echo "outputs=$(cat terraform_outputs.json)" >> $GITHUB_OUTPUT

      - name: Upload Terraform Outputs
        if: github.event.inputs.destroy != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-${{ env.ENVIRONMENT }}
          path: ./terraform/hub/terraform_outputs.json
          retention-days: 90

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event.inputs.destroy != 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install -r tests/requirements.txt
          pip install boto3 moto pytest pytest-cov pytest-xdist

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets[format('{0}_ROLE_ARN', upper(env.ENVIRONMENT))] }}
          role-session-name: github-actions-test-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs-${{ env.ENVIRONMENT }}

      - name: Run Integration Tests
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          TF_OUTPUTS_FILE: terraform_outputs.json
        run: |
          pytest tests/ \
            --cov=tests \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=test-results.xml \
            --verbose \
            -x

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ env.ENVIRONMENT }}
          path: |
            test-results.xml
            htmlcov/
          retention-days: 30

      - name: Post Test Results to PR
        uses: dorny/test-reporter@v1
        if: github.event_name == 'pull_request' && always()
        with:
          name: Integration Test Results
          path: test-results.xml
          reporter: java-junit

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event.inputs.destroy != 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets[format('{0}_ROLE_ARN', upper(env.ENVIRONMENT))] }}
          role-session-name: github-actions-smoke-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs-${{ env.ENVIRONMENT }}

      - name: Test Step Functions Definition
        run: |
          STATE_MACHINE_ARN=$(jq -r '.state_machine_arn.value' terraform_outputs.json)
          aws stepfunctions describe-state-machine --state-machine-arn "$STATE_MACHINE_ARN"

      - name: Test Lambda Functions
        run: |
          FUNCTIONS=$(jq -r '.lambda_function_names.value | to_entries[] | .value' terraform_outputs.json)
          for func in $FUNCTIONS; do
            echo "Testing Lambda function: $func"
            aws lambda get-function --function-name "$func"
            aws lambda invoke --function-name "$func" --payload '{"test": true}' response.json || true
          done

      - name: Test SNS Topic
        run: |
          TOPIC_ARN=$(jq -r '.sns_topic_arn.value' terraform_outputs.json)
          aws sns get-topic-attributes --topic-arn "$TOPIC_ARN"

      - name: Test S3 Bucket Access
        run: |
          BUCKET_NAME=$(jq -r '.s3_bucket_name.value' terraform_outputs.json)
          aws s3 ls "s3://$BUCKET_NAME/" || echo "Empty bucket is expected"

      - name: Test DynamoDB Table
        run: |
          TABLE_NAME=$(jq -r '.dynamodb_table_name.value' terraform_outputs.json)
          aws dynamodb describe-table --table-name "$TABLE_NAME"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, integration-tests, smoke-tests]
    if: always()
    steps:
      - name: Notify Slack on Success
        if: needs.deploy.result == 'success' && needs.integration-tests.result == 'success' && needs.smoke-tests.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          fields: repo,message,commit,author,action,eventName,ref,workflow
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            ✅ EC2 Patching Hub deployed successfully to ${{ env.ENVIRONMENT }}!
            
            Environment: ${{ env.ENVIRONMENT }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}

      - name: Notify Slack on Failure
        if: needs.deploy.result == 'failure' || needs.integration-tests.result == 'failure' || needs.smoke-tests.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            ❌ EC2 Patching Hub deployment failed in ${{ env.ENVIRONMENT }}!
            
            Environment: ${{ env.ENVIRONMENT }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Check the GitHub Actions logs for details.

      - name: Create GitHub Issue on Failure
        if: failure() && github.ref == 'refs/heads/main'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Production Deployment Failed - ${context.runId}`,
              body: `
                **Deployment Failure Alert**
                
                - **Environment:** ${{ env.ENVIRONMENT }}
                - **Workflow:** ${{ github.workflow }}
                - **Run ID:** ${{ github.run_id }}
                - **Commit:** ${{ github.sha }}
                - **Author:** ${{ github.actor }}
                
                **Failed Jobs:**
                ${needs.deploy.result === 'failure' ? '- Deploy Infrastructure' : ''}
                ${needs.integration-tests.result === 'failure' ? '- Integration Tests' : ''}
                ${needs.smoke-tests.result === 'failure' ? '- Smoke Tests' : ''}
                
                Please investigate the failure and take corrective action.
                
                [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `,
              labels: ['bug', 'deployment', 'urgent'],
              assignees: ['${{ github.actor }}']
            });
            
            console.log('Created issue:', issue.data.number);
